{"version":3,"sources":["components/Error/Error.js","components/Header/Header.js","components/Home/Home.js","GraphQL/signin-user.js","components/Login/Login.js","GraphQL/queries.js","GraphQL/update-user.js","components/Update-Form/Update-Form.js","components/User-Landing/User-Landing.js","components/assets/postage-stamp.png","components/Postcard-Form/Postcard-Form.js","components/Success-Message/Success-Message.js","components/Postcard-Preview/Postcard-Preview.js","components/App/App.js","index.js"],"names":["Error","className","Header","isLoggedIn","setIsLoggedIn","useState","isOpen","setOpen","closeHamburger","clearLocalStorage","localStorage","clear","client","resetStore","toggled","toggle","onClick","to","Home","aria-label","gql","Login","setID","validLogin","setValidLogin","email","setEmail","password","setPassword","useMutation","SIGNIN_USER","onCompleted","data","parseInt","signinUser","user","id","setItem","JSON","stringify","htmlFor","type","name","value","minLength","maxLength","autoComplete","required","onChange","e","target","event","length","preventDefault","variables","UpdateUserInfoForm","queryData","back","userID","description","about","setAbout","street","city","state","zip","country","userAddress","setAddress","UPDATE_USER","updateUser","inputHandler","onSubmit","refetchQueries","query","GET_USER","UserLandingPage","updating","setUpdating","loading","useQuery","onError","readQuery","activePal","PostcardForm","location","useLocation","image","setImage","message","setMessage","useEffect","undefined","noValidate","src","stamp","alt","pathname","SuccessMessage","Preview","success","setSuccess","divImage","backgroundImage","style","App","storedData","parse","getItem","exact","path","render","errorLink","graphqlErrors","link","from","HttpLink","uri","ApolloClient","cache","InMemoryCache","fetchOptions","mode","connectToDevTools","router","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ae68f405.chunk.js","sourcesContent":["// Imports\nimport React from 'react';\n\n// Styling Imports\nimport './_Error.scss';\n\nconst Error = () => {\n    return (\n        <section className='errorSection'>\n            <article className='errorMessage'>\n                <h2>We are having technical difficulties.</h2>\n                <p><em>Please try again or revisit at a later time.</em></p>\n            </article>\n        </section>\n    )\n}\n\nexport default Error\n","//Imports\nimport React,  { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n// Component Imports\nimport Hamburger from 'hamburger-react';\n\n// Styling Imports\nimport './_Header.scss';\n\nimport { client } from '../../index'\n\nconst Header = ({ isLoggedIn, setIsLoggedIn }) => {\n  const [isOpen, setOpen] = useState(false)\n\n  const closeHamburger = () => {\n    setOpen(false)\n  }\n\n  const updateLogIn = () => {\n    setIsLoggedIn(false)\n    clearLocalStorage()\n  }\n\n  const clearLocalStorage = () => {\n    localStorage.clear()\n    client.resetStore()\n  }\n\n  return (\n    <header>\n      <Hamburger toggled={isOpen} toggle={setOpen} />\n      {isOpen && !isLoggedIn && (\n        <div className='menuOptions'>\n          <ul className='menu' onClick={closeHamburger} >\n            <li>\n              <Link to='/' >Home</Link>\n            </li>\n            <li>\n              <Link to='/login' >Login</Link>\n            </li>\n          </ul>\n        </div>\n      )}\n\n      {isOpen && isLoggedIn && (\n        <div className='menuOptions'>\n          <ul className='menu' onClick={closeHamburger} >\n            <li>\n              <Link to='/' >Home</Link>\n            </li>\n            <li>\n            <Link to='/user-landing' >My Info</Link>\n            </li>\n            <li>\n            <Link to='/create-postcard' >Create</Link>\n            </li>\n            <li onClick={updateLogIn}>\n              <Link to='/login' >Logout</Link>\n            </li>\n          </ul>\n        </div>\n      )}\n      <h1 className='headerTitle'>PenPost</h1>\n    </header>\n  );\n}\n\nHeader.propTypes = {\n  isLoggedIn: PropTypes.bool,\n  setIsLoggedIn: PropTypes.func\n}\n\nexport default Header;\n","// Imports\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n// Styling Imports\nimport './_Home.scss';\n\nconst Home = ({ isLoggedIn }) => {\n    return (\n      <section className='homepage'>\n        <h1 className='homepageTitle'>Welcome to</h1>\n        <div className='penPostImage'><h1 className='penPostText'>PenPost</h1></div>\n        <p className='paragraphText'>Take a picture and send it as postcard from your phone to your PenPost.</p>\n        {!isLoggedIn &&\n          <div className='buttonContainer'>\n              <Link to='/login'>\n              <button className='loginButton button' aria-label='login'>\n                  Login\n              </button>\n              </Link>\n          </div>\n        }\n      </section>\n    );\n}\n\nHome.propTypes = {\n  isLoggedIn: PropTypes.bool\n}\n\nexport default Home;\n","import { gql } from \"@apollo/client\";\n\nexport default gql`\n  mutation ($email: String!, $password: String!) {\n    signinUser(input: {\n      credentials: {\n        email: $email, \n        password: $password\n      } \n    }){\n        token\n          user {\n            id\n          }\n       }\n  }\n`;\n","// Imports\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n// Apollo Imports\nimport { useMutation } from '@apollo/client';\nimport SIGNIN_USER from '../../GraphQL/signin-user';\n\nconst Login = ( { setIsLoggedIn, setID } ) => {\n  const [validLogin, setValidLogin] = useState(true);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const [signinUser] = useMutation(SIGNIN_USER, {\n    onCompleted: data => {\n      setID(parseInt(data.signinUser.user.id))\n      localStorage.setItem('userData', JSON.stringify(data.signinUser.user.id))\n    }\n  });\n\n  const checkLogin = (event) => {\n    if ( email.length < 6 || password.length < 6 ) {\n      event.preventDefault();\n      setEmail('');\n      setPassword('');\n      setValidLogin(false);\n    } else {\n      setIsLoggedIn(true);\n      signinUser({\n        variables: {email: email, password: password}\n      });\n    }\n  }\n\n  return (\n    <section className='loginSection'>\n      <h1 className='loginTitle'>Login</h1>\n      <form>\n        <div>\n          <label htmlFor='email'>email address:</label>\n          <input\n            type='text'\n            id='email'\n            name='email'\n            value={email}\n            minLength='6'\n            maxLength='30'\n            autoComplete='on'\n            required\n            onChange={(e) => setEmail(e.target.value)}\n          />\n        </div>\n        <div>\n          <label htmlFor='password'>password:</label>\n          <input\n            type='password'\n            id='password'\n            name='password'\n            value={password}\n            minLength='6'\n            maxLength='20'\n            autoComplete='off'\n            required\n            onChange={(e) => setPassword(e.target.value)}\n          />\n        </div>\n        <Link to='/user-landing' className='landingPage'>\n          <button\n            className='loggedInButton'\n            type='submit'\n            name='button'\n            aria-label='login'\n            onClick={checkLogin}\n          >\n            Login\n          </button>\n        </Link>\n      </form>\n      {!validLogin && (\n        <article className='invalidLoginText'>\n          <p>\n            Oops, please check either your username or password! Something seems\n            wrong.\n          </p>\n        </article>\n      )}\n    </section>\n  );\n}\n\nLogin.propTypes = {\n  email: PropTypes.string,\n  password: PropTypes.string,\n  validLogin: PropTypes.bool,\n  setIsLoggedIn: PropTypes.func,\n  setID: PropTypes.func\n}\n\nexport default Login;\n","import {gql} from '@apollo/client'\n\nexport default gql`\n  query ($id: ID!) {\n    user(id: $id) {\n      name\n      email\n      description\n      street\n      city\n      state\n      zip\n      country\n      addressVerified\n      activePal\n      {\n        name\n        description\n        country\n      }\n    }\n  }\n`\n","import { gql } from '@apollo/client';\n\nexport default gql `\n  mutation ($id: ID!, $description: String!, $street: String!, $city: String!, $country: String!, $state: String!, $zip: String!) {\n    updateUser(input: {\n      id: $id\n      description: $description\n      country: $country\n      state: $state\n      city: $city\n      street: $street\n      zip: $zip\n    }) {\n      description\n      country\n      state\n      city\n      street\n      zip\n    }\n  }\n`","// Imports\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n// Apollo Imports\nimport { useMutation } from '@apollo/client';\nimport UPDATE_USER from '../../GraphQL/update-user';\nimport GET_USER from '../../GraphQL/queries'\n\n// Component Imports\nimport { CountryDropdown, RegionDropdown } from 'react-country-region-selector';\n\nconst UpdateUserInfoForm = ({ queryData, back, userID }) => {\n  const [about, setAbout] = useState(queryData.description);\n  const [userAddress, setAddress] = useState({\n    street: queryData.street,\n    city: queryData.city,\n    state: queryData.state,\n    zip: queryData.zip,\n    country: queryData.country,\n  });\n  const [updateUser] = useMutation(UPDATE_USER);\n\n  const inputHandler = (e) => {\n    switch (e.target.id) {\n      case 'street':\n        setAddress({ ...userAddress, street: e.target.value });\n        break;\n      case 'city':\n        setAddress({ ...userAddress, city: e.target.value });\n        break;\n      case 'state':\n        setAddress({ ...userAddress, state: e.target.value });\n        break;\n      case 'zip':\n        setAddress({ ...userAddress, zip: e.target.value });\n        break;\n      case 'country':\n        setAddress({ ...userAddress, country: e.target.value });\n        break;\n      case 'about':\n        setAbout(e.target.value);\n        break;\n      default:\n        return userAddress;\n    }\n  };\n\n  const submitHandler = (event) => {\n    event.preventDefault();\n    back();\n    updateUser({\n      variables: {\n        id: userID,\n        description: about,\n        street: userAddress.street,\n        country: userAddress.country,\n        state: userAddress.state,\n        city: userAddress.city,\n        zip: userAddress.zip,\n      },\n      refetchQueries: [{ query: GET_USER, variables: { id: userID } }],\n    });\n  };\n\n  return (\n    <article className='form-wrapper'>\n      <form onChange={inputHandler} onSubmit={submitHandler}>\n        <div>\n          <label htmlFor='country'>Country:</label>\n          <CountryDropdown\n            value={userAddress.country}\n            id='country'\n            className='country'\n          />\n          <label htmlFor='state'>State/Region:</label>\n          <RegionDropdown\n            country={userAddress.country}\n            value={userAddress.state}\n            id='state'\n            className='state'\n          />\n          <label htmlFor='street'>Street:</label>\n          <input\n            type='text'\n            value={userAddress.street}\n            id='street'\n            onChange={inputHandler}\n          />\n          <label htmlFor='city'>City:</label>\n          <input\n            type='text'\n            value={userAddress.city}\n            id='city'\n            onChange={inputHandler}\n          />\n          <label htmlFor='zip'>Zip/Postal:</label>\n          <input\n            type='number'\n            value={userAddress.zip}\n            id='zip'\n            onChange={inputHandler}\n          />\n        </div>\n        <label htmlFor='about'>About:</label>\n        <textarea\n          type='text'\n          value={about}\n          id='about'\n          className='about'\n          maxLength='250'\n          onChange={inputHandler}\n        />\n        <label htmlFor='submit' />\n        <input type='submit' value='Update' id='submit' className='submit' />\n      </form>\n      <label htmlFor='back' value='back' />\n      <button onClick={back} id='back' className='back'>\n        Back\n      </button>\n    </article>\n  );\n};\n\nUpdateUserInfoForm.propTypes = {\n  queryData: PropTypes.shape({\n    street: PropTypes.string,\n    city: PropTypes.string,\n    state: PropTypes.string,\n    zip: PropTypes.string,\n    country: PropTypes.string,\n    description: PropTypes.string\n  }),\n  back: PropTypes.func,\n  userID: PropTypes.number\n}\n\nexport default UpdateUserInfoForm;\n","// Imports\nimport React, { useState } from 'react';\nimport { Link, Redirect  } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n// Apollo Imports\nimport { useQuery } from '@apollo/client'\nimport GET_USER from '../../GraphQL/queries'\nimport { client } from '../../index'\n\n// Component Imports\nimport UpdateUserInfoForm from '../Update-Form/Update-Form';\n\nconst UserLandingPage = ({ id }) => {\n\n  const [updating, setUpdating] = useState(false);\n  const { loading } = useQuery(GET_USER, {\n    variables: { id: id },\n    onError: <Redirect to=\"/Error\" />\n  });\n  const queryData = client.readQuery({\n    query: GET_USER,\n    variables: { id: id },\n  });\n\n  if (loading) return <p>Loading...</p>;\n\n  return (\n    <div className=\"landing-wrapper\">\n      {!updating && (\n        <>\n          <h1 className='landing-title'>Welcome {queryData.user.name}</h1>\n          <div className='info-wrapper'>\n            <h2>Profile Info</h2>\n            <div className=\"address\">\n              <h4>{queryData.user.street} </h4>\n              <h4>\n                {queryData.user.city} {queryData.user.state},{\" \"}\n                {queryData.user.zip}\n              </h4>\n              <h4>{queryData.user.country}</h4>\n            </div>\n            {queryData.user.description && (\n              <h4 className=\"about\">{queryData.user.description}</h4>\n            )}\n            {!queryData.user.description && (\n              <h4 className=\"about\">\n                {\n                  \"Uh oh, looks like you are missing an about me! Click Edit below to add one!\"\n                }\n              </h4>\n            )}\n            <div className=\"button-wrapper\">\n              <button onClick={() => setUpdating(true)}>Edit</button>\n            </div>\n          </div>\n          <div className=\"info-wrapper\">\n            <h2>Connection</h2>\n                <h4 className=\"connection-name\">\n                  You are connected with {queryData.user.activePal.name} (\n                  {queryData.user.activePal.country})\n                </h4>\n                <h4 className=\"about\">{queryData.user.activePal.about}</h4>\n                <div className=\"button-wrapper\">\n                  <Link to=\"/create-postcard\">\n                    <button>Send Postcard</button>\n                  </Link>\n                </div>\n              </div>\n            </>\n            )}\n      {updating && (\n        <UpdateUserInfoForm\n          userID={id}\n          queryData={queryData.user}\n          back={() => setUpdating(false)}\n        />\n      )}\n    </div>\n  );\n}\n\nUserLandingPage.propTypes = {\n  id: PropTypes.number\n}\n\nexport default UserLandingPage;\n","export default __webpack_public_path__ + \"static/media/postage-stamp.7d006688.png\";","// Imports\nimport React, { useState, useEffect } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n// UI Imports\nimport stamp from '../assets/postage-stamp.png';\n\nconst PostcardForm = () => {\n\n  const location = useLocation();\n  const [image, setImage] = useState('');\n  const [message, setMessage] = useState('');\n\n  useEffect((image, message) => {\n    if(image === null || message === null) {\n      setImage('')\n      setMessage('')\n    } else if (location.state !== undefined) {\n      setImage(location.state.image)\n      setMessage(location.state.message)\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  // still throwing error of missing location.state dependency\n\n\n  const inputHandler = (e) => {\n    switch (e.target.id) {\n      case 'message':\n        setMessage(e.target.value)\n        break\n      case 'image':\n        setImage(e.target.value)\n        break\n      default:\n          return\n    }\n  }\n\n  return (\n    <section className='postcard-form'>\n      <h2>Create your postcard here!</h2>\n      <form onChange={inputHandler} noValidate>\n        <h3>Select and Upload an Image</h3>\n        <p>(Please use a link)</p>\n        <article>\n          <label htmlFor='image' value='image upload'/>\n          <input\n            type='text'\n            value={image}\n            id='image'\n            className='image'\n            onChange={inputHandler}\n            required\n          />\n          <label htmlFor='clear-image' value='clear image' />\n          <button type='button' id='clear-image' onClick={() => setImage('')}>X</button>\n        </article>\n        <article className='image-thumbnail'>\n          {!image &&\n            <img\n              src={stamp}\n              alt='an image placeholder'\n            />\n          }\n          {image &&\n            <img\n              src={image}\n              alt='your image thumbnail'\n            />\n          }\n        </article>\n        <h3>Enter your message below</h3>\n        <p>(400 character limit)</p>\n        <label htmlFor='message' value='message' />\n        <textarea\n          type='text'\n          maxLength='400'\n          value={message}\n          id='message'\n          onChange={inputHandler}\n          required\n        />\n        <label htmlFor='preview' value='preview postcard' />\n        <Link to={{\n          pathname: '/preview-postcard',\n          state: {\n            image,\n            message\n          }\n        }}>\n          <input type='submit' value='Preview' id='preview' className='preview '/>\n        </Link>\n      </form>\n    </section>\n  )\n}\n\nPostcardForm.propTypes = {\n  image: PropTypes.string,\n  message: PropTypes.string\n}\n\nexport default PostcardForm;\n","// Imports\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst SuccessMessage = () => {\n  return (\n    <section className='successMessage'>\n      <h1>Thank you!</h1>\n      <p>We&apos;ve recieved your postcard & it will be sent to your PenPost in 1 - 3 days.</p>\n      <Link to='/user-landing'>\n        <button>Ok!</button>\n      </Link>\n    </section>\n  )\n}\n\nexport default SuccessMessage;\n","// Imports\nimport React, { useState } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\n// Component Imports\nimport SuccessMessage from '../Success-Message/Success-Message';\n\nconst Preview = () => {\n  const location = useLocation();\n  const { image, message } = location.state;\n  const [ success, setSuccess ] = useState(false);\n\n  const divImage = {backgroundImage: 'url(' + image + ')', alt: 'your uploaded image'}\n\n  const fireSuccessMessage = () => {\n    setSuccess(true);\n  }\n\n  return (\n    <>\n      {!success &&\n        <section className='preview'>\n          <article className='front'>\n            <div className='image' style={divImage} alt='your uploaded image'>\n            <div className='text'>Pen Post</div>\n            </div>\n          </article>\n\n          <article className='back'>\n            <div className='message'>\n              {message}\n            </div>\n            <div className='separation' />\n            <div className='address' >\n              <hr/>\n              <hr/>\n              <hr/>\n              <hr/>\n            </div>\n            <div className='stamp' />\n            </article>\n            <div className='button-wrapper'>\n            <Link to={{\n              pathname: '/create-postcard',\n              state: {\n                image,\n                message\n              }\n            }}>\n              <button>Edit</button>\n            </Link>\n              <button onClick={fireSuccessMessage}>Send!</button>\n          </div>\n        </section>\n      }\n\n      {success &&\n        <SuccessMessage />\n      }\n    </>\n  )\n\n}\n\nPreview.propTypes = {\n  image: PropTypes.string,\n  message: PropTypes.string\n}\n\nexport default Preview;\n","// Imports\nimport React, { useState, useEffect } from 'react';\nimport { Route } from 'react-router-dom';\n\n// Component Imports\nimport Header from '../Header/Header';\nimport Home from '../Home/Home';\nimport Login from '../Login/Login';\nimport UserLanding from '../User-Landing/User-Landing';\nimport PostcardForm from '../Postcard-Form/Postcard-Form';\nimport Preview from '../Postcard-Preview/Postcard-Preview';\nimport Error from '../Error/Error';\n\n\n// Styling Imports\nimport './_App.scss';\n\nconst App = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(null);\n  const [userID, setID] = useState(null)\n\n  useEffect(() => {\n    const storedData = JSON.parse(localStorage.getItem(\"userData\"))\n    if (storedData !== null) {\n      setIsLoggedIn(true)\n      setID(parseInt(storedData))\n    } else {\n      setIsLoggedIn(false)\n    }\n  }, [])\n\n  return (\n    <main>\n      <Header isLoggedIn={isLoggedIn} setIsLoggedIn={setIsLoggedIn} />\n      <Route\n        exact\n        path='/'\n        render={() => <Home\n            isLoggedIn={isLoggedIn}\n          />}\n      />\n      <Route\n        exact\n        path='/login'\n        render={() =>\n          <Login\n            setIsLoggedIn={setIsLoggedIn}\n            setID={setID}\n          />}\n      />\n      <Route\n        exact\n        path='/user-landing'\n        render={() =>\n          <UserLanding\n            isLoggedIn={isLoggedIn}\n            id={ userID }\n          />}\n      />\n      <Route\n        exact\n        path='/create-postcard'\n        render={() => <PostcardForm />}\n      />\n      <Route\n        exact\n        path='/preview-postcard'\n        render={() => <Preview />}\n      />\n      <Route\n        exact\n        path='/error'\n        render={() => <Error />}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","// Imports\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Error from './components/Error/Error'\nimport App from './components/App/App'\nimport './index.scss'\nimport { HashRouter } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  from\n} from '@apollo/client';\nimport { onError } from '@apollo/client/link/error'\n\nconst errorLink = onError(({ graphqlErrors/*, networkError*/}) => {\n  if (graphqlErrors) {\n    return ( <Error /> )\n  }\n})\n\nconst link = from([\n  errorLink,\n  new HttpLink({ uri: 'https://penpost-api.herokuapp.com/graphql' })\n])\n\nexport const client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link,\n  fetchOptions: {\n    mode: 'no-cors',\n  },\n  connectToDevTools: true\n})\n\nconst router = (\n  <HashRouter>\n    <App />\n  </HashRouter>\n);\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    {router}\n  </ApolloProvider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}